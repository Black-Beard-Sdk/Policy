//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PolicyLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Policies.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PolicyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOT=1, QUESTION_MARK=2, COLON=3, NOT=4, PARENT_LEFT=5, PARENT_RIGHT=6, 
		BRACKET_LEFT=7, BRACKET_RIGHT=8, EQUAL=9, INEQUAL=10, OR=11, AND=12, COMMA=13, 
		HAS=14, HAS_NOT=15, IN=16, NOT_IN=17, ALIAS=18, POLICY=19, INHERIT=20, 
		STRING=21, MULTI_LINE_COMMENT=22, SINGLE_QUOTE_CODE_STRING=23, ID=24, 
		IDQUOTED=25, VARIABLE_NAME=26, IDLOWCASE=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOT", "QUESTION_MARK", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "INHERIT", "ESC", 
		"STRING", "MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", 
		"VARIABLE_NAME", "IDLOWCASE", "SAFECODEPOINT", "UNICODE", "HEX"
	};


	public PolicyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolicyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'?'", "':'", "'!'", "'('", "')'", "'['", "']'", "'='", "'!='", 
		"'|'", "'&'", "','", "'has'", "'!has'", "'in'", "'!in'", "'alias'", "'policy'", 
		"'inherit'", null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "QUESTION_MARK", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "INHERIT", "STRING", 
		"MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", "VARIABLE_NAME", 
		"IDLOWCASE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PolicyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolicyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,195,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
		13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
		18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,131,8,20,
		1,21,1,21,1,21,5,21,136,8,21,10,21,12,21,139,9,21,1,21,1,21,1,22,1,22,
		1,22,1,22,5,22,147,8,22,10,22,12,22,150,9,22,1,22,1,22,1,22,1,22,1,22,
		1,23,1,23,1,24,1,24,5,24,161,8,24,10,24,12,24,164,9,24,1,25,1,25,1,25,
		1,25,1,26,1,26,5,26,172,8,26,10,26,12,26,175,9,26,1,26,1,26,1,27,1,27,
		5,27,181,8,27,10,27,12,27,184,9,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
		1,29,1,30,1,30,1,148,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,0,43,21,
		45,22,47,23,49,24,51,25,53,26,55,27,57,0,59,0,61,0,1,0,7,8,0,34,34,47,
		47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,95,95,97,122,3,0,48,57,95,95,97,122,3,
		0,0,31,34,34,92,92,3,0,48,57,65,70,97,102,197,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
		0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,63,1,0,0,0,3,65,1,0,0,0,5,67,
		1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,73,1,0,0,0,13,75,1,0,0,0,15,77,1,
		0,0,0,17,79,1,0,0,0,19,81,1,0,0,0,21,84,1,0,0,0,23,86,1,0,0,0,25,88,1,
		0,0,0,27,90,1,0,0,0,29,94,1,0,0,0,31,99,1,0,0,0,33,102,1,0,0,0,35,106,
		1,0,0,0,37,112,1,0,0,0,39,119,1,0,0,0,41,127,1,0,0,0,43,132,1,0,0,0,45,
		142,1,0,0,0,47,156,1,0,0,0,49,158,1,0,0,0,51,165,1,0,0,0,53,169,1,0,0,
		0,55,178,1,0,0,0,57,185,1,0,0,0,59,187,1,0,0,0,61,193,1,0,0,0,63,64,5,
		46,0,0,64,2,1,0,0,0,65,66,5,63,0,0,66,4,1,0,0,0,67,68,5,58,0,0,68,6,1,
		0,0,0,69,70,5,33,0,0,70,8,1,0,0,0,71,72,5,40,0,0,72,10,1,0,0,0,73,74,5,
		41,0,0,74,12,1,0,0,0,75,76,5,91,0,0,76,14,1,0,0,0,77,78,5,93,0,0,78,16,
		1,0,0,0,79,80,5,61,0,0,80,18,1,0,0,0,81,82,5,33,0,0,82,83,5,61,0,0,83,
		20,1,0,0,0,84,85,5,124,0,0,85,22,1,0,0,0,86,87,5,38,0,0,87,24,1,0,0,0,
		88,89,5,44,0,0,89,26,1,0,0,0,90,91,5,104,0,0,91,92,5,97,0,0,92,93,5,115,
		0,0,93,28,1,0,0,0,94,95,5,33,0,0,95,96,5,104,0,0,96,97,5,97,0,0,97,98,
		5,115,0,0,98,30,1,0,0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,32,1,0,
		0,0,102,103,5,33,0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,34,1,0,0,
		0,106,107,5,97,0,0,107,108,5,108,0,0,108,109,5,105,0,0,109,110,5,97,0,
		0,110,111,5,115,0,0,111,36,1,0,0,0,112,113,5,112,0,0,113,114,5,111,0,0,
		114,115,5,108,0,0,115,116,5,105,0,0,116,117,5,99,0,0,117,118,5,121,0,0,
		118,38,1,0,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,104,0,0,122,
		123,5,101,0,0,123,124,5,114,0,0,124,125,5,105,0,0,125,126,5,116,0,0,126,
		40,1,0,0,0,127,130,5,92,0,0,128,131,7,0,0,0,129,131,3,59,29,0,130,128,
		1,0,0,0,130,129,1,0,0,0,131,42,1,0,0,0,132,137,5,34,0,0,133,136,3,41,20,
		0,134,136,3,57,28,0,135,133,1,0,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,
		135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,137,1,0,0,0,140,141,5,
		34,0,0,141,44,1,0,0,0,142,143,5,47,0,0,143,144,5,42,0,0,144,148,1,0,0,
		0,145,147,9,0,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,149,1,0,0,0,148,
		146,1,0,0,0,149,151,1,0,0,0,150,148,1,0,0,0,151,152,5,42,0,0,152,153,5,
		47,0,0,153,154,1,0,0,0,154,155,6,22,0,0,155,46,1,0,0,0,156,157,5,39,0,
		0,157,48,1,0,0,0,158,162,7,1,0,0,159,161,7,2,0,0,160,159,1,0,0,0,161,164,
		1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,50,1,0,0,0,164,162,1,0,0,0,
		165,166,5,39,0,0,166,167,3,49,24,0,167,168,5,39,0,0,168,52,1,0,0,0,169,
		173,7,1,0,0,170,172,7,2,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,
		0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,177,3,5,2,0,
		177,54,1,0,0,0,178,182,7,3,0,0,179,181,7,4,0,0,180,179,1,0,0,0,181,184,
		1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,56,1,0,0,0,184,182,1,0,0,0,
		185,186,8,5,0,0,186,58,1,0,0,0,187,188,5,117,0,0,188,189,3,61,30,0,189,
		190,3,61,30,0,190,191,3,61,30,0,191,192,3,61,30,0,192,60,1,0,0,0,193,194,
		7,6,0,0,194,62,1,0,0,0,8,0,130,135,137,148,162,173,182,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Policies.Parser

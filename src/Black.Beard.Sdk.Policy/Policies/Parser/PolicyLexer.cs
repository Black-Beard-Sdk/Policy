//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PolicyLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Policies.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PolicyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, DOT=3, COLON=4, NOT=5, PARENT_LEFT=6, PARENT_RIGHT=7, 
		BRACKET_LEFT=8, BRACKET_RIGHT=9, EQUAL=10, INEQUAL=11, OR=12, AND=13, 
		COMMA=14, HAS=15, HAS_NOT=16, IN=17, NOT_IN=18, ALIAS=19, POLICY=20, INHERIT=21, 
		STRING=22, MULTI_LINE_COMMENT=23, SINGLE_QUOTE_CODE_STRING=24, ID=25, 
		IDQUOTED=26, VARIABLE_NAME=27, IDLOWCASE=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TRUE", "FALSE", "DOT", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "INHERIT", "ESC", 
		"STRING", "MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", 
		"VARIABLE_NAME", "IDLOWCASE", "SAFECODEPOINT", "UNICODE", "HEX"
	};


	public PolicyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolicyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'.'", "':'", "'!'", "'('", "')'", "'['", "']'", 
		"'='", "'!='", "'|'", "'&'", "','", "'has'", "'!has'", "'in'", "'!in'", 
		"'alias'", "'policy'", "'inherit'", null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "DOT", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "INHERIT", "STRING", 
		"MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", "VARIABLE_NAME", 
		"IDLOWCASE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PolicyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolicyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,206,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
		1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,142,8,21,1,22,1,22,1,22,5,22,147,
		8,22,10,22,12,22,150,9,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,158,8,23,
		10,23,12,23,161,9,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,5,25,
		172,8,25,10,25,12,25,175,9,25,1,26,1,26,1,26,1,26,1,27,1,27,5,27,183,8,
		27,10,27,12,27,186,9,27,1,27,1,27,1,28,1,28,5,28,192,8,28,10,28,12,28,
		195,9,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,159,0,32,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,0,45,22,47,23,49,24,51,25,
		53,26,55,27,57,28,59,0,61,0,63,0,1,0,7,8,0,34,34,47,47,92,92,98,98,102,
		102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,2,0,95,95,97,122,3,0,48,57,95,95,97,122,3,0,0,31,34,34,92,92,
		3,0,48,57,65,70,97,102,208,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
		19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
		0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
		0,41,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,65,1,0,0,0,3,70,1,0,0,0,5,76,1,0,0,
		0,7,78,1,0,0,0,9,80,1,0,0,0,11,82,1,0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,
		17,88,1,0,0,0,19,90,1,0,0,0,21,92,1,0,0,0,23,95,1,0,0,0,25,97,1,0,0,0,
		27,99,1,0,0,0,29,101,1,0,0,0,31,105,1,0,0,0,33,110,1,0,0,0,35,113,1,0,
		0,0,37,117,1,0,0,0,39,123,1,0,0,0,41,130,1,0,0,0,43,138,1,0,0,0,45,143,
		1,0,0,0,47,153,1,0,0,0,49,167,1,0,0,0,51,169,1,0,0,0,53,176,1,0,0,0,55,
		180,1,0,0,0,57,189,1,0,0,0,59,196,1,0,0,0,61,198,1,0,0,0,63,204,1,0,0,
		0,65,66,5,116,0,0,66,67,5,114,0,0,67,68,5,117,0,0,68,69,5,101,0,0,69,2,
		1,0,0,0,70,71,5,102,0,0,71,72,5,97,0,0,72,73,5,108,0,0,73,74,5,115,0,0,
		74,75,5,101,0,0,75,4,1,0,0,0,76,77,5,46,0,0,77,6,1,0,0,0,78,79,5,58,0,
		0,79,8,1,0,0,0,80,81,5,33,0,0,81,10,1,0,0,0,82,83,5,40,0,0,83,12,1,0,0,
		0,84,85,5,41,0,0,85,14,1,0,0,0,86,87,5,91,0,0,87,16,1,0,0,0,88,89,5,93,
		0,0,89,18,1,0,0,0,90,91,5,61,0,0,91,20,1,0,0,0,92,93,5,33,0,0,93,94,5,
		61,0,0,94,22,1,0,0,0,95,96,5,124,0,0,96,24,1,0,0,0,97,98,5,38,0,0,98,26,
		1,0,0,0,99,100,5,44,0,0,100,28,1,0,0,0,101,102,5,104,0,0,102,103,5,97,
		0,0,103,104,5,115,0,0,104,30,1,0,0,0,105,106,5,33,0,0,106,107,5,104,0,
		0,107,108,5,97,0,0,108,109,5,115,0,0,109,32,1,0,0,0,110,111,5,105,0,0,
		111,112,5,110,0,0,112,34,1,0,0,0,113,114,5,33,0,0,114,115,5,105,0,0,115,
		116,5,110,0,0,116,36,1,0,0,0,117,118,5,97,0,0,118,119,5,108,0,0,119,120,
		5,105,0,0,120,121,5,97,0,0,121,122,5,115,0,0,122,38,1,0,0,0,123,124,5,
		112,0,0,124,125,5,111,0,0,125,126,5,108,0,0,126,127,5,105,0,0,127,128,
		5,99,0,0,128,129,5,121,0,0,129,40,1,0,0,0,130,131,5,105,0,0,131,132,5,
		110,0,0,132,133,5,104,0,0,133,134,5,101,0,0,134,135,5,114,0,0,135,136,
		5,105,0,0,136,137,5,116,0,0,137,42,1,0,0,0,138,141,5,92,0,0,139,142,7,
		0,0,0,140,142,3,61,30,0,141,139,1,0,0,0,141,140,1,0,0,0,142,44,1,0,0,0,
		143,148,5,34,0,0,144,147,3,43,21,0,145,147,3,59,29,0,146,144,1,0,0,0,146,
		145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,
		0,0,0,150,148,1,0,0,0,151,152,5,34,0,0,152,46,1,0,0,0,153,154,5,47,0,0,
		154,155,5,42,0,0,155,159,1,0,0,0,156,158,9,0,0,0,157,156,1,0,0,0,158,161,
		1,0,0,0,159,160,1,0,0,0,159,157,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,
		0,162,163,5,42,0,0,163,164,5,47,0,0,164,165,1,0,0,0,165,166,6,23,0,0,166,
		48,1,0,0,0,167,168,5,39,0,0,168,50,1,0,0,0,169,173,7,1,0,0,170,172,7,2,
		0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
		52,1,0,0,0,175,173,1,0,0,0,176,177,5,39,0,0,177,178,3,51,25,0,178,179,
		5,39,0,0,179,54,1,0,0,0,180,184,7,1,0,0,181,183,7,2,0,0,182,181,1,0,0,
		0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,
		184,1,0,0,0,187,188,3,7,3,0,188,56,1,0,0,0,189,193,7,3,0,0,190,192,7,4,
		0,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,
		58,1,0,0,0,195,193,1,0,0,0,196,197,8,5,0,0,197,60,1,0,0,0,198,199,5,117,
		0,0,199,200,3,63,31,0,200,201,3,63,31,0,201,202,3,63,31,0,202,203,3,63,
		31,0,203,62,1,0,0,0,204,205,7,6,0,0,205,64,1,0,0,0,8,0,141,146,148,159,
		173,184,193,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Policies.Parser

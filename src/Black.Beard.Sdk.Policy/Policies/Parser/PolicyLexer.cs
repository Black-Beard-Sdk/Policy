//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PolicyLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Policies.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PolicyLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOT=1, QUESTION_MARK=2, COLON=3, NOT=4, PARENT_LEFT=5, PARENT_RIGHT=6, 
		BRACKET_LEFT=7, BRACKET_RIGHT=8, EQUAL=9, INEQUAL=10, OR=11, AND=12, COMMA=13, 
		HAS=14, HAS_NOT=15, IN=16, NOT_IN=17, ALIAS=18, POLICY=19, STRING=20, 
		MULTI_LINE_COMMENT=21, SINGLE_QUOTE_CODE_STRING=22, ID=23, IDQUOTED=24, 
		VARIABLE_NAME=25, IDLOWCASE=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DOT", "QUESTION_MARK", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "ESC", "STRING", 
		"MULTI_LINE_COMMENT", "SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", "VARIABLE_NAME", 
		"IDLOWCASE", "SAFECODEPOINT", "UNICODE", "HEX"
	};


	public PolicyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PolicyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'?'", "':'", "'!'", "'('", "')'", "'['", "']'", "'='", "'!='", 
		"'|'", "'&'", "','", "'has'", "'!has'", "'in'", "'!in'", "'alias'", "'policy'", 
		null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "QUESTION_MARK", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", 
		"BRACKET_LEFT", "BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", 
		"HAS", "HAS_NOT", "IN", "NOT_IN", "ALIAS", "POLICY", "STRING", "MULTI_LINE_COMMENT", 
		"SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", "VARIABLE_NAME", "IDLOWCASE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PolicyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolicyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,3,19,121,8,19,1,20,1,20,1,20,5,20,126,8,20,10,20,12,20,129,9,20,
		1,20,1,20,1,21,1,21,1,21,1,21,5,21,137,8,21,10,21,12,21,140,9,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,5,23,151,8,23,10,23,12,23,154,
		9,23,1,24,1,24,1,24,1,24,1,25,1,25,5,25,162,8,25,10,25,12,25,165,9,25,
		1,25,1,25,1,26,1,26,5,26,171,8,26,10,26,12,26,174,9,26,1,27,1,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,138,0,30,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
		19,39,0,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,0,57,0,59,0,1,0,7,
		8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,95,95,97,122,3,0,48,57,95,
		95,97,122,3,0,0,31,34,34,92,92,3,0,48,57,65,70,97,102,187,0,1,1,0,0,0,
		0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
		0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
		25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
		0,0,0,0,37,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,
		1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,75,1,
		0,0,0,17,77,1,0,0,0,19,79,1,0,0,0,21,82,1,0,0,0,23,84,1,0,0,0,25,86,1,
		0,0,0,27,88,1,0,0,0,29,92,1,0,0,0,31,97,1,0,0,0,33,100,1,0,0,0,35,104,
		1,0,0,0,37,110,1,0,0,0,39,117,1,0,0,0,41,122,1,0,0,0,43,132,1,0,0,0,45,
		146,1,0,0,0,47,148,1,0,0,0,49,155,1,0,0,0,51,159,1,0,0,0,53,168,1,0,0,
		0,55,175,1,0,0,0,57,177,1,0,0,0,59,183,1,0,0,0,61,62,5,46,0,0,62,2,1,0,
		0,0,63,64,5,63,0,0,64,4,1,0,0,0,65,66,5,58,0,0,66,6,1,0,0,0,67,68,5,33,
		0,0,68,8,1,0,0,0,69,70,5,40,0,0,70,10,1,0,0,0,71,72,5,41,0,0,72,12,1,0,
		0,0,73,74,5,91,0,0,74,14,1,0,0,0,75,76,5,93,0,0,76,16,1,0,0,0,77,78,5,
		61,0,0,78,18,1,0,0,0,79,80,5,33,0,0,80,81,5,61,0,0,81,20,1,0,0,0,82,83,
		5,124,0,0,83,22,1,0,0,0,84,85,5,38,0,0,85,24,1,0,0,0,86,87,5,44,0,0,87,
		26,1,0,0,0,88,89,5,104,0,0,89,90,5,97,0,0,90,91,5,115,0,0,91,28,1,0,0,
		0,92,93,5,33,0,0,93,94,5,104,0,0,94,95,5,97,0,0,95,96,5,115,0,0,96,30,
		1,0,0,0,97,98,5,105,0,0,98,99,5,110,0,0,99,32,1,0,0,0,100,101,5,33,0,0,
		101,102,5,105,0,0,102,103,5,110,0,0,103,34,1,0,0,0,104,105,5,97,0,0,105,
		106,5,108,0,0,106,107,5,105,0,0,107,108,5,97,0,0,108,109,5,115,0,0,109,
		36,1,0,0,0,110,111,5,112,0,0,111,112,5,111,0,0,112,113,5,108,0,0,113,114,
		5,105,0,0,114,115,5,99,0,0,115,116,5,121,0,0,116,38,1,0,0,0,117,120,5,
		92,0,0,118,121,7,0,0,0,119,121,3,57,28,0,120,118,1,0,0,0,120,119,1,0,0,
		0,121,40,1,0,0,0,122,127,5,34,0,0,123,126,3,39,19,0,124,126,3,55,27,0,
		125,123,1,0,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,
		1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,5,34,0,0,131,42,1,0,0,
		0,132,133,5,47,0,0,133,134,5,42,0,0,134,138,1,0,0,0,135,137,9,0,0,0,136,
		135,1,0,0,0,137,140,1,0,0,0,138,139,1,0,0,0,138,136,1,0,0,0,139,141,1,
		0,0,0,140,138,1,0,0,0,141,142,5,42,0,0,142,143,5,47,0,0,143,144,1,0,0,
		0,144,145,6,21,0,0,145,44,1,0,0,0,146,147,5,39,0,0,147,46,1,0,0,0,148,
		152,7,1,0,0,149,151,7,2,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,
		0,0,0,152,153,1,0,0,0,153,48,1,0,0,0,154,152,1,0,0,0,155,156,5,39,0,0,
		156,157,3,47,23,0,157,158,5,39,0,0,158,50,1,0,0,0,159,163,7,1,0,0,160,
		162,7,2,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,
		0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,3,5,2,0,167,52,1,0,0,0,168,
		172,7,3,0,0,169,171,7,4,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,
		0,0,0,172,173,1,0,0,0,173,54,1,0,0,0,174,172,1,0,0,0,175,176,8,5,0,0,176,
		56,1,0,0,0,177,178,5,117,0,0,178,179,3,59,29,0,179,180,3,59,29,0,180,181,
		3,59,29,0,181,182,3,59,29,0,182,58,1,0,0,0,183,184,7,6,0,0,184,60,1,0,
		0,0,8,0,120,125,127,138,152,163,172,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Policies.Parser

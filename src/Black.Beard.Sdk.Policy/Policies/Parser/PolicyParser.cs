//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PolicyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Policies.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PolicyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DOT=1, COLON=2, NOT=3, PARENT_LEFT=4, PARENT_RIGHT=5, BRACKET_LEFT=6, 
		BRACKET_RIGHT=7, EQUAL=8, INEQUAL=9, OR=10, AND=11, COMMA=12, HAS=13, 
		HAS_NOT=14, IN=15, NOT_IN=16, ALIAS=17, POLICY=18, INHERIT=19, STRING=20, 
		MULTI_LINE_COMMENT=21, SINGLE_QUOTE_CODE_STRING=22, ID=23, IDQUOTED=24, 
		VARIABLE_NAME=25, IDLOWCASE=26;
	public const int
		RULE_script = 0, RULE_pair = 1, RULE_pair_alias = 2, RULE_pair_policy = 3, 
		RULE_inherit = 4, RULE_categories = 5, RULE_array = 6, RULE_operationBoolean = 7, 
		RULE_operationEqual = 8, RULE_operationContains = 9, RULE_expression = 10, 
		RULE_value_ref = 11, RULE_source = 12, RULE_string = 13, RULE_alias_id = 14, 
		RULE_policy_id = 15, RULE_policy_ref = 16, RULE_key_ref = 17, RULE_category = 18;
	public static readonly string[] ruleNames = {
		"script", "pair", "pair_alias", "pair_policy", "inherit", "categories", 
		"array", "operationBoolean", "operationEqual", "operationContains", "expression", 
		"value_ref", "source", "string", "alias_id", "policy_id", "policy_ref", 
		"key_ref", "category"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "':'", "'!'", "'('", "')'", "'['", "']'", "'='", "'!='", 
		"'|'", "'&'", "','", "'has'", "'!has'", "'in'", "'!in'", "'alias'", "'policy'", 
		"'inherit'", null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DOT", "COLON", "NOT", "PARENT_LEFT", "PARENT_RIGHT", "BRACKET_LEFT", 
		"BRACKET_RIGHT", "EQUAL", "INEQUAL", "OR", "AND", "COMMA", "HAS", "HAS_NOT", 
		"IN", "NOT_IN", "ALIAS", "POLICY", "INHERIT", "STRING", "MULTI_LINE_COMMENT", 
		"SINGLE_QUOTE_CODE_STRING", "ID", "IDQUOTED", "VARIABLE_NAME", "IDLOWCASE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PolicyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PolicyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PolicyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PolicyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PolicyParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS || _la==POLICY) {
				{
				{
				State = 38;
				pair();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pair_aliasContext pair_alias() {
			return GetRuleContext<Pair_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pair_policyContext pair_policy() {
			return GetRuleContext<Pair_policyContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 2, RULE_pair);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALIAS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				pair_alias();
				}
				break;
			case POLICY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47;
				pair_policy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pair_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PolicyParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_idContext alias_id() {
			return GetRuleContext<Alias_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PolicyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Pair_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pair_aliasContext pair_alias() {
		Pair_aliasContext _localctx = new Pair_aliasContext(Context, State);
		EnterRule(_localctx, 4, RULE_pair_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(ALIAS);
			State = 51;
			alias_id();
			State = 52;
			Match(COLON);
			State = 53;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pair_policyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PolicyParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Policy_idContext policy_id() {
			return GetRuleContext<Policy_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PolicyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CategoriesContext categories() {
			return GetRuleContext<CategoriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InheritContext inherit() {
			return GetRuleContext<InheritContext>(0);
		}
		public Pair_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pair_policyContext pair_policy() {
		Pair_policyContext _localctx = new Pair_policyContext(Context, State);
		EnterRule(_localctx, 6, RULE_pair_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(POLICY);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENT_LEFT) {
				{
				State = 56;
				categories();
				}
			}

			State = 59;
			policy_id();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERIT) {
				{
				State = 60;
				inherit();
				}
			}

			State = 63;
			Match(COLON);
			State = 64;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PolicyParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Policy_refContext policy_ref() {
			return GetRuleContext<Policy_refContext>(0);
		}
		public InheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInherit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InheritContext inherit() {
		InheritContext _localctx = new InheritContext(Context, State);
		EnterRule(_localctx, 8, RULE_inherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(INHERIT);
			State = 67;
			policy_ref();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT_LEFT() { return GetToken(PolicyParser.PARENT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CategoryContext[] category() {
			return GetRuleContexts<CategoryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CategoryContext category(int i) {
			return GetRuleContext<CategoryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT_RIGHT() { return GetToken(PolicyParser.PARENT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PolicyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PolicyParser.COMMA, i);
		}
		public CategoriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_categories; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategories(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoriesContext categories() {
		CategoriesContext _localctx = new CategoriesContext(Context, State);
		EnterRule(_localctx, 10, RULE_categories);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(PARENT_LEFT);
			State = 70;
			category();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 71;
				Match(COMMA);
				State = 72;
				category();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(PARENT_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_LEFT() { return GetToken(PolicyParser.BRACKET_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Value_refContext[] value_ref() {
			return GetRuleContexts<Value_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_refContext value_ref(int i) {
			return GetRuleContext<Value_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKET_RIGHT() { return GetToken(PolicyParser.BRACKET_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PolicyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PolicyParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 12, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(BRACKET_LEFT);
			State = 81;
			value_ref();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 82;
				Match(COMMA);
				State = 83;
				value_ref();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationBooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PolicyParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PolicyParser.OR, 0); }
		public OperationBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationBooleanContext operationBoolean() {
		OperationBooleanContext _localctx = new OperationBooleanContext(Context, State);
		EnterRule(_localctx, 14, RULE_operationBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = TokenStream.LA(1);
			if ( !(_la==OR || _la==AND) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationEqualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PolicyParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INEQUAL() { return GetToken(PolicyParser.INEQUAL, 0); }
		public OperationEqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationEqual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationEqualContext operationEqual() {
		OperationEqualContext _localctx = new OperationEqualContext(Context, State);
		EnterRule(_localctx, 16, RULE_operationEqual);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==INEQUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContainsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PolicyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IN() { return GetToken(PolicyParser.NOT_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(PolicyParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_NOT() { return GetToken(PolicyParser.HAS_NOT, 0); }
		public OperationContainsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operationContains; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperationContains(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContainsContext operationContains() {
		OperationContainsContext _localctx = new OperationContainsContext(Context, State);
		EnterRule(_localctx, 18, RULE_operationContains);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 122880L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_refContext key_ref() {
			return GetRuleContext<Key_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceContext source() {
			return GetRuleContext<SourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationEqualContext operationEqual() {
			return GetRuleContext<OperationEqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_refContext value_ref() {
			return GetRuleContext<Value_refContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PolicyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT_LEFT() { return GetToken(PolicyParser.PARENT_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT_RIGHT() { return GetToken(PolicyParser.PARENT_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationBooleanContext operationBoolean() {
			return GetRuleContext<OperationBooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationContainsContext operationContains() {
			return GetRuleContext<OperationContainsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
			case IDQUOTED:
				{
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 98;
					source();
					}
					break;
				}
				State = 101;
				key_ref();
				State = 105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 102;
					operationEqual();
					State = 103;
					value_ref();
					}
					break;
				}
				}
				break;
			case NOT:
				{
				State = 107;
				Match(NOT);
				State = 108;
				expression(4);
				}
				break;
			case PARENT_LEFT:
				{
				State = 109;
				Match(PARENT_LEFT);
				State = 110;
				expression(0);
				State = 111;
				Match(PARENT_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 123;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 116;
						operationBoolean();
						State = 117;
						expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 119;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 120;
						operationContains();
						State = 121;
						array();
						}
						break;
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Value_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		public Value_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_refContext value_ref() {
		Value_refContext _localctx = new Value_refContext(Context, State);
		EnterRule(_localctx, 22, RULE_value_ref);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				@string();
				}
				break;
			case IDQUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(IDQUOTED);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PolicyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(Context, State);
		EnterRule(_localctx, 24, RULE_source);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==IDQUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 134;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PolicyParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 26, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		public Alias_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_idContext alias_id() {
		Alias_idContext _localctx = new Alias_idContext(Context, State);
		EnterRule(_localctx, 28, RULE_alias_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==IDQUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Policy_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		public Policy_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_policy_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolicy_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Policy_idContext policy_id() {
		Policy_idContext _localctx = new Policy_idContext(Context, State);
		EnterRule(_localctx, 30, RULE_policy_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==IDQUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Policy_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		public Policy_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_policy_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolicy_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Policy_refContext policy_ref() {
		Policy_refContext _localctx = new Policy_refContext(Context, State);
		EnterRule(_localctx, 32, RULE_policy_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==IDQUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_refContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDQUOTED() { return GetToken(PolicyParser.IDQUOTED, 0); }
		public Key_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_refContext key_ref() {
		Key_refContext _localctx = new Key_refContext(Context, State);
		EnterRule(_localctx, 34, RULE_key_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==IDQUOTED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PolicyParser.ID, 0); }
		public CategoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPolicyParserVisitor<TResult> typedVisitor = visitor as IPolicyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoryContext category() {
		CategoryContext _localctx = new CategoryContext(Context, State);
		EnterRule(_localctx, 36, RULE_category);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,26,149,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,5,0,40,8,0,10,0,12,0,43,9,
		0,1,0,1,0,1,1,1,1,3,1,49,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,3,3,58,8,3,1,
		3,1,3,3,3,62,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,74,8,5,10,
		5,12,5,77,9,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,85,8,6,10,6,12,6,88,9,6,1,6,
		1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,100,8,10,1,10,1,10,1,10,1,10,
		3,10,106,8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,114,8,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,5,10,124,8,10,10,10,12,10,127,9,10,1,11,1,
		11,1,11,3,11,132,8,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,17,1,17,1,18,1,18,1,18,0,1,20,19,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,0,4,1,0,10,11,1,0,8,9,1,0,13,16,1,0,23,24,143,0,41,
		1,0,0,0,2,48,1,0,0,0,4,50,1,0,0,0,6,55,1,0,0,0,8,66,1,0,0,0,10,69,1,0,
		0,0,12,80,1,0,0,0,14,91,1,0,0,0,16,93,1,0,0,0,18,95,1,0,0,0,20,113,1,0,
		0,0,22,131,1,0,0,0,24,133,1,0,0,0,26,136,1,0,0,0,28,138,1,0,0,0,30,140,
		1,0,0,0,32,142,1,0,0,0,34,144,1,0,0,0,36,146,1,0,0,0,38,40,3,2,1,0,39,
		38,1,0,0,0,40,43,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,44,1,0,0,0,43,
		41,1,0,0,0,44,45,5,0,0,1,45,1,1,0,0,0,46,49,3,4,2,0,47,49,3,6,3,0,48,46,
		1,0,0,0,48,47,1,0,0,0,49,3,1,0,0,0,50,51,5,17,0,0,51,52,3,28,14,0,52,53,
		5,2,0,0,53,54,3,26,13,0,54,5,1,0,0,0,55,57,5,18,0,0,56,58,3,10,5,0,57,
		56,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,61,3,30,15,0,60,62,3,8,4,0,61,
		60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,2,0,0,64,65,3,20,10,0,65,
		7,1,0,0,0,66,67,5,19,0,0,67,68,3,32,16,0,68,9,1,0,0,0,69,70,5,4,0,0,70,
		75,3,36,18,0,71,72,5,12,0,0,72,74,3,36,18,0,73,71,1,0,0,0,74,77,1,0,0,
		0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,5,0,
		0,79,11,1,0,0,0,80,81,5,6,0,0,81,86,3,22,11,0,82,83,5,12,0,0,83,85,3,22,
		11,0,84,82,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,
		0,0,88,86,1,0,0,0,89,90,5,7,0,0,90,13,1,0,0,0,91,92,7,0,0,0,92,15,1,0,
		0,0,93,94,7,1,0,0,94,17,1,0,0,0,95,96,7,2,0,0,96,19,1,0,0,0,97,99,6,10,
		-1,0,98,100,3,24,12,0,99,98,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,
		105,3,34,17,0,102,103,3,16,8,0,103,104,3,22,11,0,104,106,1,0,0,0,105,102,
		1,0,0,0,105,106,1,0,0,0,106,114,1,0,0,0,107,108,5,3,0,0,108,114,3,20,10,
		4,109,110,5,4,0,0,110,111,3,20,10,0,111,112,5,5,0,0,112,114,1,0,0,0,113,
		97,1,0,0,0,113,107,1,0,0,0,113,109,1,0,0,0,114,125,1,0,0,0,115,116,10,
		2,0,0,116,117,3,14,7,0,117,118,3,20,10,3,118,124,1,0,0,0,119,120,10,1,
		0,0,120,121,3,18,9,0,121,122,3,12,6,0,122,124,1,0,0,0,123,115,1,0,0,0,
		123,119,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,21,
		1,0,0,0,127,125,1,0,0,0,128,132,3,26,13,0,129,132,5,24,0,0,130,132,5,23,
		0,0,131,128,1,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,132,23,1,0,0,0,133,
		134,7,3,0,0,134,135,5,1,0,0,135,25,1,0,0,0,136,137,5,20,0,0,137,27,1,0,
		0,0,138,139,7,3,0,0,139,29,1,0,0,0,140,141,7,3,0,0,141,31,1,0,0,0,142,
		143,7,3,0,0,143,33,1,0,0,0,144,145,7,3,0,0,145,35,1,0,0,0,146,147,5,23,
		0,0,147,37,1,0,0,0,12,41,48,57,61,75,86,99,105,113,123,125,131
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Policies.Parser
